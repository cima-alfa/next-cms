// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  output          = "./db"
  previewFeatures = ["postgresqlExtensions"]
  binaryTargets   = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider   = "postgresql"
  url        = env("POSTGRES_PRISMA_URL")
  directUrl  = env("POSTGRES_URL_NON_POOLING")
  extensions = [uuidOssp(map: "uuid-ossp")]
}

model Page {
  id        String        @id @default(uuid()) @db.Uuid
  createdAt DateTime      @default(now())
  updatedAt DateTime?     @updatedAt
  title     String        @db.VarChar(255)
  content   String?
  published Boolean       @default(false)
  metadata  PageMetaData?
  // author    User     @relation(fields: [authorId], references: [id])
  // authorId  String   @db.Uuid
}

enum Robots {
  IndexFollow
  NoIndexNoFollow
  IndexNoFollow
  NoIndexFollow
}

enum SitemapInclude {
  Yes
  No
}

enum SitemapPrio {
  P100
  P90
  P80
  P70
  P60
  P50
  P40
  P30
  P20
  P10
  P0
}

enum SitemapChangeFreq {
  Always
  Hourly
  Daily
  Weekly
  Monthly
  Yearly
  Never
}

model PageMetaData {
  id                Int               @id @default(autoincrement())
  title             String            @db.VarChar(255)
  description       String?           @db.VarChar(255)
  permalink         String            @unique
  robots            Robots            @default(IndexFollow)
  sitemapInclude    SitemapInclude    @default(Yes)
  sitemapPrio       SitemapPrio       @default(P70)
  sitemapChangeFreq SitemapChangeFreq @default(Monthly)
  page              Page              @relation(fields: [pageId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  pageId            String            @unique @db.Uuid
}

// model User {
//   id       String   @id @db.Uuid @default(uuid())
//   email    String   @db.VarChar(255) @unique
//   password String   @db.VarChar(255)
//   name     String?  @db.VarChar(255)
//   posts    Post[]
// }
